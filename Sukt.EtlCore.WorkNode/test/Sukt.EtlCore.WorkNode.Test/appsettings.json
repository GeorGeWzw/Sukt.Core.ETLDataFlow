{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  ///Consul配置信息
  "Service": {
    "Name": "Sukt.EtlCore.WorkNode.API",
    "Port": "80",
    "Version": "v1",
    "DocName": "Sukt.EtlCore.WorkNode.API",
    "Title": "Sukt.EtlCore.WorkNode.API Client Service API",
    "Description": "Sukt.EtlCore.WorkNode.API Client Service API provide some API to help you get OA information",
    "XmlFile": "Sukt.EtlCore.WorkNode.API.xml"
  },
  // 配置Consul中心
  "Consul": {
    "IP": "1065.cloud",
    "Port": "8863"
  },
  "Console": {
    "LogLevel": {
      "Default": "Information"
    }
  },
  "AllowedHosts": "*",
  "SuktCore": {
    "Swagger": {
      "Title": "Sukt.EtlCore.WorkNode.API",
      "Version": "v1.0",
      "Url": "/doc/BasicsService/v1.0/swagger.json"
    },
    "DbContext": {
      "MysqlConnectionString": "SuktCoreDB.txt",
      "MongoDBConnectionString": "SuktCoreMongoDb.txt" //开发用数据库
    },
    "AopManager": {
      "AopTran": {
        "Enabled": true //是否启用全局事务日志
      },
      "RedisCachingAop": {
        "Enabled": false //是否启用全局RedisAOP缓存
      },
      "LogAop": {
        "Enabled": false //是否启用全局AOP日志
      }
    },
    "InterceptorsModule": "Sukt.EtlCore.WorkNode.Application", //AOP需要代理的层；这个位置根据生成项目的名称去做代理;我这里代理的是服务实现层
    //"IInterceptorsModule": "Sukt.EtlCore.WorkNode.Application.Contracts", //AOP需要代理的层；这个位置根据生成项目的名称去做代理;我这里代理的是服务接口层
    "Cors": {
      "PolicyName": "SuktCore.API",
      "Url": "http://localhost:8080,http://localhost:8081,http://localhost:8082,http://localhost:8083,http://localhost:8084" ////支持多个域名端口，注意端口号后不要带/斜杆：比如localhost:8000/，是错的
    },
    "Redis": {
      "ConnectionString": "SuktCoreRedis.txt"
    }
  }
}